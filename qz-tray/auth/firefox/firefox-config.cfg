//##############################################################################
//#     Firefox AutoConfig for QZ Tray Software https://qz.io                  #
//##############################################################################
//# Copyright (C) 2017 Tres Finocchiaro, QZ Industries, LLC                    #
//#                                                                            #
//# LGPL 2.1 This is free software.  This software and source code are         #
//# released under the "LGPL 2.1 License".  A copy of this license should be   #
//# distributed with this software. http://www.gnu.org/licenses/lgpl-2.1.html  #
//#                                                                            #
//# NOTE:  This certificate is unique and private to THIS PC ONLY.  It was     #
//# created on-the-fly at install time for secure websockets to function with  #
//# QZ Tray software.                                                          #
//#                                                                            #
//# For questions please visit https://qz.io/support                           #
//##############################################################################


var observer = {
    observe: function observe(aSubject, aTopic, aData) {
        // Get NSS certdb object
        var certdb = getCertDB();

        if (needsUninstall()) {
            deleteCertificate();
        } else if (needsCert()) {
            deleteCertificate();
            installCertificate();
            registerProtocol();
        }

        // Compares the timestamp embedded in this script against that stored in the browser's about:config
        function needsCert() {
            try {
                return getPref("qz-tray.installer.timestamp") != getInstallerTimestamp();
            } catch(notfound) {}
            return true;
        }

        // Installs the embedded base64 certificate into the browser
        function installCertificate() {
            certdb.addCertFromBase64(getCertData(), "C,C,C", "${commonName} - QZ Industries, LLC");
            pref("qz-tray.installer.timestamp", getInstallerTimestamp());
        }

        // Deletes the certificate, if it exists
        function deleteCertificate() {
            var nick1 = "${commonName} - QZ Industries, LLC";
            var nick2 = "${commonName} - QZ Industries, LLC #2";
            if (certExists(nick1)) {
                certdb.deleteCertificate(certdb.findCertByNickname(null, nick1));
            }
            if (certExists(nick2)) {
                certdb.deleteCertificate(certdb.findCertByNickname(null, nick2));
            }

            // Mark as removed
            if (!certExists(nick1) && !certExists(nick2)) {
                pref("qz-tray.installer.timestamp", "-1");
            }
        }

        // Register the specified protocol to open with the specified application
        function registerProtocol() {
            var trayApp = "${trayApp}";
            if (!trayApp) { return; }
            try {
                var hservice = Components.classes["@mozilla.org/uriloader/handler-service;1"].getService(Components.interfaces.nsIHandlerService);
                var pservice = Components.classes["@mozilla.org/uriloader/external-protocol-service;1"].getService(Components.interfaces.nsIExternalProtocolService);

                var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsIFile);
                file.initWithPath(trayApp);

                var lhandler = Components.classes["@mozilla.org/uriloader/local-handler-app;1"].createInstance(Components.interfaces.nsILocalHandlerApp);
                lhandler.executable = file;
                lhandler.name = "QZ Tray";

                var protocol = pservice.getProtocolHandlerInfo("qz");
                protocol.preferredApplicationHandler = lhandler;
                protocol.preferredAction = 2; // useHelperApp
                protocol.alwaysAskBeforeHandling = false;
                hservice.store(protocol);
            } catch(ignore) {}
        }

        // Returns true if the certificate already exists
        function certExists(nickname) {
            try {
                certdb.findCertByNickname(null, nickname);
            } catch(notfound) {
                return false;
            }
            return true;
        }

        // Get certdb object
        function getCertDB() {
            // Import certificate using NSS certdb API (http://tinyurl.com/x509certdb)
            var id = "@mozilla.org/security/x509certdb;1";
            var db1 = Components.classes[id].getService(Components.interfaces.nsIX509CertDB);
            var db2 = db1;
            try {
                db2 = Components.classes[id].getService(Components.interfaces.nsIX509CertDB2);
            } catch(ignore) {}
            return db2;
        }

        // The certificate to import (automatically generated by desktop installer)
        function getCertData() {
            return "${certData}";
        }

        // The timestamp created by the desktop installer
        function getInstallerTimestamp() {
            return "${timestamp}";
        }

        // Whether or not an uninstall should occur, flagged by the installer/uninstaller
        function needsUninstall() {
            try {
                if (getPref("qz-tray.installer.timestamp") == "-1") {
                    return false;
                }
            }
            catch(notfound) {
                return false;
            }
            return ${uninstall};
        }
    }
};

Components.utils.import("resource://gre/modules/Services.jsm");
Services.obs.addObserver(observer, "profile-after-change", false);